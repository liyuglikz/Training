/* note for cmake-languate (https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#cmake-language-7) */

[ 0 Organization ]
	[0.1 Dircetories	(CMakeLists.txt)]
		编译过程中，CMakeLists.txt是当前入口。
		可以通过add_subdirectory()命令来添加子目录，每个被此命令添加的子目录中也必须包含一个CMakeLists.txt作为其子目录的入口。

		(etc:)
			.
			│	
			└ CMakeLists.txt (EntryPoint)
				│
				├ Main.cpp		
				│
				├ others.....
				│
				├ [subdir1] ── CMakeLists.txt 
				│					│
				│					└─ somecode.cpp ...
				│
				└ [subdir2] ── CMakeLists.txt 
									│
									└─ [subdir2.1] ── CMakeLists.txt 


	[0.1 Scripts	(<script>.cmake)]
		单独的 <script>.cmake 文件可以通过cmake 带 -P 参数在脚本模式下执行。
		脚本模式只是简单运行 脚本文件 中的命令。


	[0.2 Modules	(<module>.cmake)]
		CMake语言代码可以在Directories或Scripts中使用 include() 命令调用 <module>.cmake 文件。

[ 1 Syntax ]
	[ 1.1 Encoding ]
		CMake代码文件以7-bit ASC-II文字编写以兼容大部分平台。

	[ 1.2 Source Files ]
		CMake代码由０个或多个命令调用组成。

		file         ::=  file_element*
		file_element ::=  command_invocation line_ending |
		(bracket_comment|space)* line_ending
		line_ending  ::=  line_comment? newline
		space        ::=  <match '[ \t]+'>
		newline      ::=  <match '\n'>

		
	[ 1.3 Command Invocations ] 命令调用
		一个命令调用是由　命令名　与　一组闭合的括号组成(中间含有多个以空格间隔的参数)

			file         ::=  file_element*
			file_element ::=  command_invocation line_ending |
			(bracket_comment|space)* line_ending
			line_ending  ::=  line_comment? newline
			space        ::=  <match '[ \t]+'>
			newline      ::=  <match '\n'>

		命令名不区分大小写，命令名后的括号必须一一匹配。	
		Example:
			add_executable( hello world.c );

	[ 1.4 Comman Arguments ] 命令参数
		命令调用中有三类参数：
			argument ::=  bracket_argument | quoted_argument | unquoted_argument	
			方括号参数、双引号参数、不带双引号参数

			( 1.4.1 Bracket Argument)
				bracket_argument ::=  bracket_open bracket_content bracket_close
				bracket_open     ::=  '[' '='* '['
				bracket_content  ::=  <any text not containing a bracket_close with
				                       the same number of '=' as the bracket_open>
				bracket_close    ::=  ']' '='* ']'

				example:
				message([=[
						This is the first line in a bracket argument with bracket length 1.
						No \-escape sequences or ${variable} references are evaluated.
						This is always one argument even though it contains a ; character.
						The text does not end on a closing bracket of length 0 like ]].
						It does end in a closing bracket of length 1.
						]=])

			( 1.4.2 Quoted Argument )
				quoted_argument     ::=  '"' quoted_element* '"'
				quoted_element      ::=  <any character except '\' or '"'> |
				                         escape_sequence |
										 quoted_continuation
				quoted_continuation ::=  '\' newline

				example:
						message("This is a quoted argument containing multiple lines.
								This is always one argument even though it contains a ; character.
								Both \\-escape sequences and ${variable} references are evaluated.
								The text does not end on an escaped double-quote like \".
								It does end in an unescaped double quote.
								")

				example2: (error after CMake 3.0)
						message("\
								This is the first line of a quoted argument. \
								In fact it is the only line but since it is long \
								the source code uses line continuation.\
								")

			( 1.4.3 Unquoted Argument )

				unquoted_argument ::=  unquoted_element+ | unquoted_legacy
				unquoted_element  ::=  <any character except whitespace or one of '()#"\'> |
				                       escape_sequence
				unquoted_legacy   ::=  <see note in text>

				example:
					foreach(arg
							NoSpace
						    Escaped\ Space
						    This;Divides;Into;Five;Arguments
							Escaped\;Semicolon
						   )
					  		message("${arg}")
					endforeach()

